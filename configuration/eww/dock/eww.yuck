;; doebox/dock
;; based on eww
;; for licensing and info refer to avdandoe/doebox

;; include

(include "./config.yuck")

;; define variables

(defvar volumePercentage 0)

(defvar dockstatusRollupBool false)

(defvar dockmainRollupBool false)

;; list pollers

(defpoll pollerTime :interval "1s"
    'date +%H:%M '
)

(defpoll pollerDate :interval "1s"
    'date "+%A, %B %d"'
)

(defpoll pollerVolume :interval "1s"
    'sh ./scripts/grabvolume.sh'
)

(defpoll pollerBluetooth :interval "3s"
    'sh ./scripts/grabbluetooth.sh'
)

(defpoll pollerWifi :interval "3s"
    'sh ./scripts/grabwifi.sh'
)

(defpoll pollerTheme :interval "1s"
    'sh ./scripts/settheme.sh'
)

(defpoll internalUname :interval "7200s"
    'whoami'
)

(defpoll diskInfoGUSD :interval "60s"
    'sh ./scripts/grabfreespace.sh gusd'
)

(defpoll diskInfoPCUSD :interval "60s"
    'sh ./scripts/grabfreespace.sh pcusd'
)

(defpoll diskInfoGSIZE :interval "60s"
    'sh ./scripts/grabfreespace.sh gsize'
)

;; end pollers



;; list windows

(defwindow dockdynamic
    :windowtype "normal"
    :geometry (geometry
                :x "-23%"
                :y "-1%"
                :width "33%"
                :height "6%"
                :anchor "bottom center")
    (dockdynamic_layout)
)


(defwindow dockmain
    :windowtype "normal"
    :geometry (geometry
                :x "0%"
                :y "-1%"
                :width "11%"
                :height "6%"
                :anchor "bottom center")
                :reserve (struts :distance "8%" :side "bottom")
    (dockmain_layout)
)


(defwindow dockstatic
    :windowtype "normal"
    :geometry (geometry
                :x "15%"
                :y "-1%"
                :width "17%"
                :height "6%"
                :anchor "bottom center")
    (dockstatic_layout)
)


(defwindow dockstatus
    :windowtype "normal"
    :geometry (geometry
                :x "32%"
                :y "-1%"
                :width "15%"
                :height "6%"
                :anchor "bottom center")
    (dockstatus_layout)
)

(defwindow dockstatus_rollup
    :windowtype "normal"
    :geometry (geometry
                :x "32%"
                :y "-9%"
                :width "15%"
                :height "18%"
                :anchor "bottom center")
    (dockstatus_rollup_layout)
)

(defwindow dockmain_rollup
    :windowtype "normal" ;; assign dock on debug end
    :geometry (geometry
                :x "0%"
                :y "-9%"
                :width "47%"
                :height "50%"
                :anchor "bottom center")
    (dockmain_rollup_layout)
)

;; end windows



;; def layouts

(defwidget dockmain_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (callAppLeft)
            (callDashboard)
            (callAppRight)
    )
)

(defwidget dockmain_rollup_layout []
    (revealer
        :transition "crossfade"
        :reveal "${dockmainRollupBool}"
            (box
                :orientation "vertical"
                :class "boxGeneric"
                (mainrollupTopRow)
                (mainrollupMiddleRow)
                (mainrollupBottomRow)
                (mainrollupSubRow)
            )
    )
)

(defwidget dockstatic_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (timeDate)
    )
)

(defwidget dockstatus_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (label :text "")
            (iconWifi)
            (iconBluetooth)
            (iconVolume)
            (iconSettings)
            (iconExpand)
            (label :text "")
    )
)

(defwidget dockstatus_rollup_layout []
    (revealer
        :transition "crossfade"
        :reveal "${dockstatusRollupBool}"
            (box
                :orientation "vertical"
                :class "boxGeneric"
                    (box
                        :orientation "horizontal"
                        :class "layoutBoxGeneric"
                            (statusRollupButton
                                :margins "8 4 4 8"
                                :tt "Wi-Fi"
                                :action "echo placeholder"
                                :icon "${pollerWifi}"
                            )
                            (statusRollupButton
                                :margins "8 8 4 4"
                                :tt "Bluetooth"
                                :action "cutefish-settings -m bluetooth&&disown"
                                :icon "${pollerBluetooth}"
                            )
                    )
                    (box
                        :orientation "horizontal"
                        :class "layoutBoxGeneric"
                            (buttonDND)
                            (buttonThemeToggle)
                    )
                    (label 
                        :markup "Hey there <b>${internalUname}</b>."
                    )
            )
    )
)

(defwidget dockdynamic_layout []
    (box
        :class "boxGeneric"
            (label 
                :markup "${pollerTheme} <b>AvdanOS</b> Alpha: Running <span font_family='monospace'> AvdanDOE 0.3 'Sun and Moon' Public </span> on <span font_family='monospace'> DOEBox v1lune </span> 󰌾 "
            )
    )
)

;; end layouts



;; def microwidgets

;; ;; main dock

(defwidget callAppRight []
    (box
        :class "appBoxGeneric"
        :vexpand false
        :hexpand false
            (button 
                :class "appIconGeneric"
                :onclick "google-chrome-stable&&disown"
                "󰊯"
            )
    )
)

(defwidget callAppLeft []
    (box
        :class "appBoxGeneric"
        :vexpand false
        :hexpand false
            (button
                :class "appIconGeneric"
                :onclick "xfce4-terminal --working-directory=~&&disown"
                "󰆍"
            )
    )
)

(defwidget callDashboard []
    (box
        :class "appBoxGeneric"
        :vexpand false
        :hexpand false
            (eventbox
                :onclick "if [ `${ewwCmd} get dockmainRollupBool` == 'false' ]; then ${ewwCmd} open dockmain_rollup && ${ewwCmd} update dockmainRollupBool=true; else ${ewwCmd} update dockmainRollupBool=false; sleep 0.1; ${ewwCmd} close dockmain_rollup; fi"
                    (image 
                        :class "appImageGeneric"
                        :path "../globalassets/avlogo.svg" 
                        :image-width 32
                    )
            )

    )
)

;; ;; end main dock

;; ;; dynamic dock

(defwidget timeDate []
    (box
        :class "textBoxGeneric"
        :vexpand false
        :hexpand false
        :orientation "vertical"
        :spacing -15
            (label 
                :class "textNormalGeneric"
                :text "${pollerTime}"
            )
            (label
                :class "textSubnormalGeneric"
                :text "${pollerDate}"
            )
    )
)

;; ;; end dynamic dock

;; ;; status dock

(defwidget iconWifi []
    (box
        :class "iconBoxGeneric"
        :vexpand false
        :hexpand false
            (button
                :tooltip "Wi-Fi" 
                :class "iconSmallGeneric" 
                :onclick "cutefish-settings -m wifi&&disown" 
                "${pollerWifi}"
            )
    )
)

(defwidget iconBluetooth []
    (box
        :class "iconBoxGeneric"
        :vexpand false
        :hexpand false
            (button 
                :tooltip "Bluetooth" 
                :class "iconSmallGeneric" 
                :onclick "cutefish-settings -m bluetooth&&disown" 
                "${pollerBluetooth}"
            )
    )
)

(defwidget iconVolume []
    (eventbox
        :onhover "${ewwCmd} update volumePercentage=$(pamixer --get-volume)"
        :onscroll "sh ./scripts/setvolume.sh {}"
            (box
                :class "iconBoxGeneric"
                :vexpand false
                :hexpand false
                    (button 
                        :tooltip "Volume: ${volumePercentage}%" 
                        :class "iconSmallGeneric" 
                        :onclick "cutefish-settings -m sound&&disown" 
                        "${pollerVolume}"
                    )
            )
    )
)

(defwidget iconSettings []
    (box
        :class "iconBoxGeneric"
        :vexpand false
        :hexpand false
            (button 
                :tooltip "Settings" 
                :class "iconSmallGeneric" 
                :onclick "cutefish-settings&&disown" 
                "󰒓"
            )
    )
)

(defwidget iconExpand []
    (box
        :class "iconBoxGeneric"
        :vexpand false
        :hexpand false
            (button 
                :tooltip "Expand rollup" 
                :class "iconSmallGeneric" 
                :onclick "if [ `${ewwCmd} get dockstatusRollupBool` == 'false' ]; then ${ewwCmd} open dockstatus_rollup && ${ewwCmd} update dockstatusRollupBool=true; else ${ewwCmd} update dockstatusRollupBool=false; sleep 0.1; ${ewwCmd} close dockstatus_rollup; fi"
                "󰾍"
            )
    )
)

;; ;; end status dock

;; ;; status dock rollup

(defwidget statusRollupButton [margins tt action icon]
    (box
        :class "buttonBoxRollup"
        :vexpand false
        :hexpand false
        :style "margin: ${margins};"
            (button
                :tooltip "${tt}"
                :class "iconGeneric"
                :onclick "${action}"
                "${icon}"
            )
    )
)

(defwidget buttonDND []
    (box
        :class "buttonBoxRollup"
        :vexpand false
        :hexpand false
        :style "margin: 4 4 4 8;"
            (button
                :tooltip "Do not Disturb"
                :class "iconGeneric"
                :onclick "echo placeholder"
                "󰍷"
            )
    )
)

(defwidget buttonThemeToggle []
    (box
        :class "buttonBoxRollup"
        :vexpand false
        :hexpand false
        :style "margin: 4 8 4 4;"
            (button
                :tooltip "Change theme"
                :class "iconGeneric"
                :onclick "echo placeholder"
                "󱎖"
            )
    )
)

;; ;; end status dock rollup

;; ;; begin main rollup

;; ;; ;; TOP ROW

(defwidget mainrollupTopRow [] ;; used for 3 top widgets // todo: color
    (box
        :vexpand false
        :hexpand false
        :orientation "horizontal"
            (mruTopLeftSection)
            (mruTopMiddleSection)
            (mruTopRightSection)
    )
)

(defwidget mruTopLeftSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "left section layout"
            )
    )
)

(defwidget mruTopMiddleSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "middle section layout"
            )
    )
)

(defwidget mruTopRightSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "right section layout"
            )
    )
)

;; ;; ;; END TOP ROW

;; ;; ;; BEGIN MIDDLE ROW

(defwidget mainrollupMiddleRow []
    (box
        :vexpand false
        :hexpand false
            (mruMiddleLeftSection)
            (mruMiddleMiddleSection)
            (mruMiddleRightSection)
    )
)

(defwidget mruMiddleLeftSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "apps 1 left"
            )
    )
)

(defwidget mruMiddleMiddleSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "apps 2 right"
            )
    )
)

(defwidget mruMiddleRightSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "pick up where you left off space"
            )
    )
)

;; ;; ;; END MIDDLE SECTION

;; ;; ;; BEGIN BOTTOM SECTION

(defwidget mainrollupBottomRow []
    (box
        :vexpand false
        :hexpand false
            (mruBottomLeftSection)
            (mruBottomMiddleSection)
            (mruBottomRightSection)
    )
)

(defwidget mruBottomLeftSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "arrangements 1"
            )
    )
)

(defwidget mruBottomMiddleSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "arrangements 2"
            )
    )
)

(defwidget mruBottomRightSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "extras"
            )
    )
)

;; ;; ;; END BOTTOM SECTION

;; ;; ;; BEGIN SUBSECTION

(defwidget mainrollupSubRow []
    (box
        :vexpand false
        :hexpand false
        :orientation "vertical"
            (mruSubSpacer)
            (mruSubSection)
    )
)

(defwidget mruSubSpacer []
    (box
        :vexpand false
        :hexpand false
    )
)

(defwidget mruSubSection []
    (box
        :vexpand false
        :hexpand false
        :orientation "horizontal"
            (mruSubProfile)
            (mruSubPowermenu)
            (mruSubDrivespace)
    )
)

(defwidget mruSubProfile []
    (box
        :vexpand false
        :hexpand false
        :space-evenly false
            (label 
                :text "(image here)"
            )
            (label 
                :text "${internalUname}"
            )
    )
)

(defwidget mruSubPowermenu []
    (box
        :vexpand false
        :hexpand false
            (mruSubPowermenuButton 
                :action "echo placeholder" 
                :icon "󰒓"
            )
            (mruSubPowermenuButton 
                :action "echo placeholder" 
                :icon "󰐥"
            )
            (mruSubPowermenuButton 
                :action "echo placeholder" 
                :icon "󰀻"
            )
    )
)

;; ;; ;; ;; buttons for subpowermenu

(defwidget mruSubPowermenuButton [icon action]
    (box
        :vexpand false
        :hexpand false
            (button 
                :class "iconGeneric"
                :onclick "${action}" 
                "${icon}"
            )

    )
)

;; ;; ;; ;; end buttons for subpowermenu

(defwidget mruSubDrivespace []
    (box
        :vexpand false
        :hexpand false
            (label 
                :class "textNormalGeneric" 
                :text "󰋊 ${diskInfoGUSD}/${diskInfoGSIZE}"
            )
    )
)

;; ;; ;; END SUBSECTION

;; end microwidgets