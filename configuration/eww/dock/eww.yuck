;; doebox/dock
;; based on eww
;; for licensing and info refer to avdandoe/doebox

;; define variables

(defvar volumePercentage 0)

(defvar ewwCmd "eww -c ~/Documents/VSCODEProjects/doebox/configuration/eww/dock")

;; list pollers

(defpoll pollerTime :interval "1s"
    'date +%H:%M '
)

(defpoll pollerDate :interval "1s"
    'date "+%A, %B %d"'
)

(defpoll pollerVolume :interval "2s"
    'sh ./scripts/grabvolume.sh'
)

(defpoll pollerBluetooth :interval "3s"
    'sh ./scripts/grabbluetooth.sh'
)

(defpoll pollerWifi :interval "3s"
    'sh ./scripts/grabwifi.sh'
)

;; end pollers



;; list windows

(defwindow dockdynamic
    :windowtype "dock"
    :geometry (geometry
                :x "-23%"
                :y "-1%"
                :width "33%"
                :height "6%"
                :anchor "bottom center")
                :stacking "bg"
    (dockdynamic_layout)
)


(defwindow dockmain
    :windowtype "dock"
    :geometry (geometry
                :x "0%"
                :y "-1%"
                :width "11%"
                :height "6%"
                :anchor "bottom center")
                :reserve (struts :distance "8%" :side "bottom")
    (dockmain_layout)
)


(defwindow dockstatic
    :windowtype "dock"
    :geometry (geometry
                :x "15%"
                :y "-1%"
                :width "17%"
                :height "6%"
                :anchor "bottom center")
    (dockstatic_layout)
)


(defwindow dockstatus
    :windowtype "dock"
    :geometry (geometry
                :x "32%"
                :y "-1%"
                :width "15%"
                :height "6%"
                :anchor "bottom center")
    (dockstatus_layout)
)

;; end windows



;; def layouts

(defwidget dockmain_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (callAppLeft)
            (callDashboard)
            (callAppRight)
    )
)

(defwidget dockstatic_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (timeDate)
    )
)

(defwidget dockstatus_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (label :text "")
            (iconWifi)
            (iconBluetooth)
            (iconVolume)
            (iconSettings)
            (iconExpand)
            (label :text "")
    )
)

(defwidget dockdynamic_layout []
    (box
        :class "boxGeneric"
            (label 
                :markup "AvdanOS Alpha: Running <span font_family='monospace'> AvdanDOE 0.2 Public </span> on <span font_family='monospace'> DOEBox v1lune </span> 󰌾 "
            )
    )
)

;; end layouts



;; def microwidgets

;; ;; main dock

(defwidget callAppRight []
    (box
        :class "appBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button 
                :class "appIconGeneric"
                :onclick "google-chrome-stable&&disown"
                "󰊯"
            )
    )
)

(defwidget callAppLeft []
    (box
        :class "appBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button
                :class "appIconGeneric"
                :onclick "xfce4-terminal --working-directory=~&&disown"
                "󰆍"
            )
    )
)

(defwidget callDashboard []
    (box
        :class "appBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button
                :class "appIconGeneric"
                :onclick "rofi -show drun&&disown"
                "󰊱"
            )
    )
)

;; ;; end main dock

;; ;; dynamic dock

(defwidget timeDate []
    (box
        :class "textBoxGeneric"
        :vexpand "false"
        :hexpand "false"
        :orientation "vertical"
        :spacing -15
            (label 
                :class "textNormalGeneric"
                :text "${pollerTime}"
            )
            (label
                :class "textSubnormalGeneric"
                :text "${pollerDate}"
            )
    )
)

;; ;; end dynamic dock

;; ;; status dock

(defwidget iconWifi []
    (box
        :class "iconBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button
                :tooltip "Wi-Fi" 
                :class "iconSmallGeneric" 
                :onclick "cutefish-settings -m wifi&&disown" 
                "${pollerWifi}"
            )
    )
)

(defwidget iconBluetooth []
    (box
        :class "iconBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button 
                :tooltip "Bluetooth" 
                :class "iconSmallGeneric" 
                :onclick "cutefish-settings -m bluetooth&&disown" 
                "${pollerBluetooth}"
            )
    )
)

(defwidget iconVolume []
    (eventbox
        :onhover "${ewwCmd} update volumePercentage=$(pamixer --get-volume)"
        :onscroll "sh ./scripts/setvolume.sh {}"
            (box
                :class "iconBoxGeneric"
                :vexpand "false"
                :hexpand "false"
                    (button 
                        :tooltip "Volume: ${volumePercentage}%" 
                        :class "iconSmallGeneric" 
                        :onclick "cutefish-settings -m sound&&disown" 
                        "${pollerVolume}"
                    )
            )
    )
)

(defwidget iconSettings []
    (box
        :class "iconBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button 
                :tooltip "Settings" 
                :class "iconSmallGeneric" 
                :onclick "cutefish-settings&&disown" 
                "󰒓"
            )
    )
)

(defwidget iconExpand []
    (box
        :class "iconBoxGeneric"
        :vexpand "false"
        :hexpand "false"
            (button 
                :tooltip "iconExpand:iconBoxGeneric" 
                :class "iconSmallGeneric" 
                :onclick "echo later" 
                "󰮫"
            )
    )
)

;; end microwidgets