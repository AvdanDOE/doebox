;; doebox/dock v1lune
;; based on eww
;; for licensing and info refer to avdandoe/doebox

;; include

; (include "./config.yuck")
(include "./pollers.yuck")
(include "./windows.yuck")

;; define variables

(defvar volumePercentage 0)

(defvar dockstatusRollupBool false)

(defvar dockmainRollupBool false)

;; def layouts

(defwidget dockmain_layout []
    (overlay
        (box
            :class "boxGeneric"     
        )
        (box
            :orientation "horizontal"
            :class "boxGenericOpaque"
                (callAppLeft)
                (callDashboard)
                (callAppRight)
        )
    )
)

(defwidget dockmain_rollup_layout []
    (overlay
        (box
            :class "boxGeneric"
        )
        (revealer
            :transition "crossfade"
            :reveal "${dockmainRollupBool}"
                (box
                    :orientation "vertical"
                    :class "boxGenericOpaque"
                        (mainrollupTopRow)
                        (mainrollupMiddleRow)
                        (mainrollupBottomRow)
                        (mainrollupSubRow)
                )
        )
    )
)

(defwidget dockstatic_layout []
    (overlay
        (box
            :class "boxGeneric"
        )
        (box
            :class "boxGenericOpaque"
            :orientation "vertical"
                (label
                    :class "textNormalGeneric"
                    :text "${pollerTime}"
                    :valign "end"
                )
                (label
                    :class "textSubnormalGeneric"
                    :text "${pollerDate}"
                    :valign "start"
                )
        )
    )
)

(defwidget dockstatus_layout []
    (overlay
        (box
            :class "boxGeneric"
        )
        (box
            :orientation "horizontal"
            :class "boxGenericOpaque"
                (label :text "")
                (statusGenericIcon
                    :tt "Wi-Fi"
                    :action "cutefish-settings -m wifi&&disown"
                    :icon "${pollerWifi}"
                )
                (statusGenericIcon
                    :tt "Bluetooth"
                    :action "cutefish-settings -m bluetooth&&disown"
                    :icon "${pollerBluetooth}"
                )
                (eventbox
                    :onhover "${EWW_CMD} update volumePercentage=$(pamixer --get-volume)"
                    :onscroll "sh ./scripts/setvolume.sh {}"
                    (statusGenericIcon
                        :tt "Volume: ${volumePercentage}%" 
                        :action "cutefish-settings -m sound&&disown"
                        :icon "󰕾"
                    )
                )
                (statusGenericIcon
                    :tt "Settings"
                    :action "cutefish-settings&&disown"
                    :icon "󰒓"
                )
                (statusGenericIcon
                    :tt "Rollup"
                    :action "if [ `${EWW_CMD} get dockstatusRollupBool` == 'false' ]; then ${EWW_CMD} open dockstatus_rollup && ${EWW_CMD} update dockstatusRollupBool=true; else ${EWW_CMD} update dockstatusRollupBool=false; sleep 0.1; ${EWW_CMD} close dockstatus_rollup; fi"
                    :icon "󰾍"
                )
                (label :text "")
        )
    )
)

(defwidget dockstatus_rollup_layout []
    (overlay
        (box
            :class "boxGeneric"
        )
        (revealer
            :transition "crossfade"
            :reveal "${dockstatusRollupBool}"
                (box
                    :orientation "vertical"
                    :class "boxGenericOpaque"
                        (box
                            :orientation "horizontal"
                            :class "layoutboxGenericOpaque"
                                (statusRollupButton
                                    :margins "8 4 4 8"
                                    :tt "Wi-Fi"
                                    :action "cutefish-settings -m wifi&&disown"
                                    :icon "${pollerWifi}"
                                )
                                (statusRollupButton
                                    :margins "8 8 4 4"
                                    :tt "Bluetooth"
                                    :action "cutefish-settings -m bluetooth&&disown"
                                    :icon "${pollerBluetooth}"
                                )
                        )
                        (box
                            :orientation "horizontal"
                            :class "layoutboxGenericOpaque"
                                (statusRollupButton
                                    :margins "4 4 4 8"
                                    :tt "Do not Disturb"
                                    :action "cutefish-settings -m notifications&&disown"
                                    :icon "󰍷"
                                )
                                (statusRollupButton
                                    :margins "4 8 4 4"
                                    :tt "Change theme"
                                    :action "cutefish-settings -m appearance&&disown"
                                    :icon "󱎖"
                                )
                        )
                        (box
                            :space-evenly false
                                (button 
                                    :onclick "pamixer --toggle-mute & ${EWW_CMD} update isMute=`pamixer --get-mute`"
                                    :halign "end"
                                    :style "margin: 0 0 0 8px;"
                                    :class "iconGeneric"
                                    {isMute ? "󰖁" : "󰕾"} 
                                )
                                (scale
                                    :class "volumeBar"
                                    :min 0
                                    :max 101
                                    :orientation "h"
                                    :hexpand true
                                    :onchange "pamixer --set-volume {}"
                                    :round-digits 0
                                    :value volumePercentage
                                )
                        )
                )
        )
    )
)

(defwidget dockdynamic_layout []
    (overlay
        (box
            :class "boxGeneric"
        )
        (box
            :class "boxGenericOpaque"
                (overlay
                    (label
                        :text "CPU: ${round(EWW_CPU["avg"], 0)}%; RAM: ${round(EWW_RAM["used_mem"]/1073741824, 2)} GiB/${round(EWW_RAM["total_mem"]/1073741824, 2)} GiB avdandoe_v1lune 󰍁"
                        :wrap false
                    )
            )
        )
    )
)

;; end layouts

;; def microwidgets

;; ;; main dock

(defwidget callAppRight []
    (box
        :class "appboxGenericOpaque"
            (button 
                :class "appIconGeneric"
                :onclick "google-chrome-stable&&disown"
                "󰊯"
            )
    )
)

(defwidget callAppLeft []
    (box
        :class "appboxGenericOpaque"
            (button
                :class "appIconGeneric"
                :onclick "cutefish-terminal&&disown"
                "󰆍"
            )
    )
)

(defwidget callDashboard []
    (box
        :class "appboxGenericOpaque"
            (eventbox
                :onclick "if [ `${EWW_CMD} get dockmainRollupBool` == 'false' ]; then ${EWW_CMD} open dockmain_rollup && ${EWW_CMD} update dockmainRollupBool=true; else ${EWW_CMD} update dockmainRollupBool=false; sleep 0.1; ${EWW_CMD} close dockmain_rollup; fi"
                    (image 
                        :class "appImageGeneric"
                        :path "../globalassets/avlogo.svg" 
                        :image-width 32
                    )
            )

    )
)

;; ;; end main dock

;; ;; status dock

(defwidget statusGenericIcon [tt action icon]
    (box
        :class "iconboxGenericOpaque"
            (button 
                :tooltip "${tt}"
                :class "iconSmallGeneric"
                :onclick "${action}"
                "${icon}"
            )
    )
)

;; ;; end status dock

;; ;; status dock rollup

(defwidget statusRollupButton [margins tt action icon ?acc]
    (box
        :class "buttonBoxRollup"
        :style "margin: ${margins};"
            (eventbox
                :cursor "pointer"
                    (button
                        :tooltip "${tt}"
                        :class "iconGeneric"
                        :onclick "${action}"
                        "${icon}"
                    )
            )
    )
)

;; ;; end status dock rollup

;; ;; begin main rollup

;; ;; ;; TOP ROW

(defwidget mainrollupTopRow [] ;; used for 3 top widgets // todo: color
    (box
        :orientation "horizontal"
            (mruTopLeftSection)
            (mruTopMiddleSection)
            (mruTopRightSection)
    )
)

(defwidget mruTopLeftSection []
    (box
            (label 
                :text "left section layout"
            )
    )
)

(defwidget mruTopMiddleSection []
    (box
            (label 
                :text "middle section layout"
            )
    )
)

(defwidget mruTopRightSection []
    (box
            (label 
                :text "right section layout"
            )
    )
)

;; ;; ;; END TOP ROW

;; ;; ;; BEGIN MIDDLE ROW

(defwidget mainrollupMiddleRow []
    (box
            (mruMiddleLeftSection)
            (mruMiddleMiddleSection)
            (mruMiddleRightSection)
    )
)

(defwidget mruMiddleLeftSection []
    (box
            (label 
                :text "apps 1 left"
            )
    )
)

(defwidget mruMiddleMiddleSection []
    (box
            (label 
                :text "apps 2 right"
            )
    )
)

(defwidget mruMiddleRightSection []
    (box
            (label 
                :text "pick up where you left off space"
            )
    )
)

;; ;; ;; END MIDDLE SECTION

;; ;; ;; BEGIN BOTTOM SECTION

(defwidget mainrollupBottomRow []
    (box
            (mruBottomLeftSection)
            (mruBottomMiddleSection)
            (mruBottomRightSection)
    )
)

(defwidget mruBottomLeftSection []
    (box
            (label 
                :text "arrangements 1"
            )
    )
)

(defwidget mruBottomMiddleSection []
    (box
            (label 
                :text "arrangements 2"
            )
    )
)

(defwidget mruBottomRightSection []
    (box
            (label 
                :text "extras"
            )
    )
)

;; ;; ;; END BOTTOM SECTION

;; ;; ;; BEGIN SUBSECTION

(defwidget mainrollupSubRow []
    (box
        :orientation "vertical"
            (mruSubSpacer)
            (mruSubSection)
    )
)

(defwidget mruSubSpacer []
    (box)
)

(defwidget mruSubSection []
    (box
        :orientation "horizontal"
            (mruSubProfile)
            (mruSubPowermenu)
            (mruSubDrivespace)
    )
)

(defwidget mruSubProfile []
    (box
        :space-evenly false
        :spacing 5
            (box
                :class "roundedProfileImage"
            )
            (label
                :halign "start"
                :text "${internalUname}"
            )
            (label :text "")
    )
)

(defwidget mruSubPowermenu []
    (box
            (mruSubPowermenuButton 
                :action "cutefish-settings&&disown" 
                :icon "󰒓"
            )
            (mruSubPowermenuButton 
                :action "cutefish-shutdown&&disown" 
                :icon "󰐥"
            )
            (mruSubPowermenuButton 
                :action "echo placeholder" 
                :icon "󰀻"
            )
    )
)

;; ;; ;; ;; buttons for subpowermenu

(defwidget mruSubPowermenuButton [icon action]
    (box
            (eventbox
                :cursor "pointer"
                    (button 
                        :class "iconGeneric"
                        :onclick "${action}" 
                        "${icon}"
                    )
            )

    )
)

;; ;; ;; ;; end buttons for subpowermenu

(defwidget mruSubDrivespace []
    (box
        :orientation "vertical"
            (label 
                :class "textSubnormalGeneric" 
                :text "󰋊 ${round(EWW_DISK["/"].used/1073741824, 1)} GiB/${round(EWW_DISK["/"].total/1073741824, 1)} GiB"
                :valign "baseline"
            )
            (scale
                :class "diskBar"
                :value "${round(EWW_DISK["/"].used_perc, 0)}"
                :orientation "h"
                :active false
                :valign "start"
            )
    )
)

;; ;; ;; END SUBSECTION

;; end microwidgets