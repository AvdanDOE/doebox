;; doebox/dock v1lune
;; based on eww
;; for licensing and info refer to avdandoe/doebox

;; include

; (include "./config.yuck")
(include "./pollers.yuck")
(include "./windows.yuck")

;; define variables

(defvar volumePercentage 0)

(defvar dockstatusRollupBool false)

(defvar dockmainRollupBool false)

;; def layouts

(defwidget dockmain_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (callAppLeft)
            (callDashboard)
            (callAppRight)
    )
)

(defwidget dockmain_rollup_layout []
    (revealer
        :transition "crossfade"
        :reveal "${dockmainRollupBool}"
            (box
                :orientation "vertical"
                :class "boxGeneric"
                    (mainrollupTopRow)
                    (mainrollupMiddleRow)
                    (mainrollupBottomRow)
                    (mainrollupSubRow)
            )
    )
)

(defwidget dockstatic_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (timeDate)
    )
)

(defwidget dockstatus_layout []
    (box
        :orientation "horizontal"
        :class "boxGeneric"
            (label :text "")
            (statusGenericIcon
                :tt "Wi-Fi"
                :action "cutefish-settings -m wifi&&disown"
                :icon "${pollerWifi}"
            )
            (statusGenericIcon
                :tt "Bluetooth"
                :action "cutefish-settings -m bluetooth&&disown"
                :icon "${pollerBluetooth}"
            )
            (eventbox
                :onhover "${EWW_CMD} update volumePercentage=$(pamixer --get-volume)"
                :onscroll "sh ./scripts/setvolume.sh {}"
                (statusGenericIcon
                    :tt "Volume: ${volumePercentage}%" 
                    :action "cutefish-settings -m sound&&disown"
                    :icon "󰕾"
                )
            )
            (statusGenericIcon
                :tt "Settings"
                :action "cutefish-settings&&disown"
                :icon "󰒓"
            )
            (statusGenericIcon
                :tt "Rollup"
                :action "if [ `${EWW_CMD} get dockstatusRollupBool` == 'false' ]; then ${EWW_CMD} open dockstatus_rollup && ${EWW_CMD} update dockstatusRollupBool=true; else ${EWW_CMD} update dockstatusRollupBool=false; sleep 0.1; ${EWW_CMD} close dockstatus_rollup; fi"
                :icon "󰾍"
            )
            (label :text "")
    )
)

(defwidget dockstatus_rollup_layout []
    (revealer
        :transition "crossfade"
        :reveal "${dockstatusRollupBool}"
            (box
                :orientation "vertical"
                :class "boxGeneric"
                    (box
                        :orientation "horizontal"
                        :class "layoutBoxGeneric"
                            (statusRollupButton
                                :margins "8 4 4 8"
                                :tt "Wi-Fi"
                                :action "cutefish-settings -m wifi&&disown"
                                :icon "${pollerWifi}"
                            )
                            (statusRollupButton
                                :margins "8 8 4 4"
                                :tt "Bluetooth"
                                :action "cutefish-settings -m bluetooth&&disown"
                                :icon "${pollerBluetooth}"
                            )
                    )
                    (box
                        :orientation "horizontal"
                        :class "layoutBoxGeneric"
                            (statusRollupButton
                                :margins "4 4 4 8"
                                :tt "Do not Disturb"
                                :action "echo placeholder"
                                :icon "󰍷"
                            )
                            (statusRollupButton
                                :margins "4 8 4 4"
                                :tt "Change theme"
                                :action "echo placeholder"
                                :icon "󱎖"
                            )
                    )
                    (label 
                        :markup "Hey there <b>${internalUname}</b>."
                    )
            )
    )
)

(defwidget dockdynamic_layout []
    (box
        :class "boxGeneric"
            (overlay
                (graph
                    :value "${round(EWW_CPU["avg"], 0)}"
                    :min 0
                    :max 100
                    :time-range "10s"
                    :line-style "round"
                    :thickness 3
                    :style "color: #0ff;"
                )
                (graph
                    :value "${round(EWW_RAM["used_mem"]/107374100, 0)}"
                    :min 0
                    :max 80
                    :time-range "10s"
                    :line-style "round"
                    :thickness 3
                    :style "color: #f00;"
                )
            )
            (label
                :text "CPU: ${round(EWW_CPU["avg"], 0)}%; RAM: ${round(EWW_RAM["used_mem"]/1073741824, 2)} GiB/${round(EWW_RAM["total_mem"]/1073741824, 2)} GiB avdandoe_v1lune 󰍁"
                :wrap true
            )
            (scale
                :class "testBar"
                :draw-value true
                :min 0
                :max 100
                :orientation "h"
            )
    )
)

;; end layouts

;; def microwidgets

;; ;; main dock

(defwidget callAppRight []
    (box
        :class "appBoxGeneric"
        :vexpand false
        :hexpand false
            (button 
                :class "appIconGeneric"
                :onclick "google-chrome-stable&&disown"
                "󰊯"
            )
    )
)

(defwidget callAppLeft []
    (box
        :class "appBoxGeneric"
        :vexpand false
        :hexpand false
            (button
                :class "appIconGeneric"
                :onclick "cutefish-terminal&&disown"
                "󰆍"
            )
    )
)

(defwidget callDashboard []
    (box
        :class "appBoxGeneric"
        :vexpand false
        :hexpand false
            (eventbox
                :onclick "if [ `${EWW_CMD} get dockmainRollupBool` == 'false' ]; then ${EWW_CMD} open dockmain_rollup && ${EWW_CMD} update dockmainRollupBool=true; else ${EWW_CMD} update dockmainRollupBool=false; sleep 0.1; ${EWW_CMD} close dockmain_rollup; fi"
                    (image 
                        :class "appImageGeneric"
                        :path "../globalassets/avlogo.svg" 
                        :image-width 32
                    )
            )

    )
)

;; ;; end main dock

;; ;; dynamic dock

(defwidget timeDate []
    (box
        :class "textBoxGeneric"
        :vexpand false
        :hexpand false
        :orientation "vertical"
        :spacing -15
            (label 
                :class "textNormalGeneric"
                :text "${pollerTime}"
            )
            (label
                :class "textSubnormalGeneric"
                :text "${pollerDate}"
            )
    )
)

;; ;; end dynamic dock

;; ;; status dock

(defwidget statusGenericIcon [tt action icon]
    (box
        :class "iconBoxGeneric"
        :vexpand false
        :hexpand false
            (eventbox
                :cursor "pointer"
                    (button 
                        :tooltip "${tt}"
                        :class "iconSmallGeneric"
                        :onclick "${action}"
                        "${icon}"
                    )
            )
    )
)

;; ;; end status dock

;; ;; status dock rollup

(defwidget statusRollupButton [margins tt action icon ?acc]
    (box
        :class "buttonBoxRollup"
        :vexpand false
        :hexpand false
        :style "margin: ${margins};"
            (eventbox
                :cursor "pointer"
                    (button
                        :tooltip "${tt}"
                        :class "iconGeneric"
                        :onclick "${action}"
                        "${icon}"
                    )
            )
    )
)

;; ;; end status dock rollup

;; ;; begin main rollup

;; ;; ;; TOP ROW

(defwidget mainrollupTopRow [] ;; used for 3 top widgets // todo: color
    (box
        :vexpand false
        :hexpand false
        :orientation "horizontal"
            (mruTopLeftSection)
            (mruTopMiddleSection)
            (mruTopRightSection)
    )
)

(defwidget mruTopLeftSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "left section layout"
            )
    )
)

(defwidget mruTopMiddleSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "middle section layout"
            )
    )
)

(defwidget mruTopRightSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "right section layout"
            )
    )
)

;; ;; ;; END TOP ROW

;; ;; ;; BEGIN MIDDLE ROW

(defwidget mainrollupMiddleRow []
    (box
        :vexpand false
        :hexpand false
            (mruMiddleLeftSection)
            (mruMiddleMiddleSection)
            (mruMiddleRightSection)
    )
)

(defwidget mruMiddleLeftSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "apps 1 left"
            )
    )
)

(defwidget mruMiddleMiddleSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "apps 2 right"
            )
    )
)

(defwidget mruMiddleRightSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "pick up where you left off space"
            )
    )
)

;; ;; ;; END MIDDLE SECTION

;; ;; ;; BEGIN BOTTOM SECTION

(defwidget mainrollupBottomRow []
    (box
        :vexpand false
        :hexpand false
            (mruBottomLeftSection)
            (mruBottomMiddleSection)
            (mruBottomRightSection)
    )
)

(defwidget mruBottomLeftSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "arrangements 1"
            )
    )
)

(defwidget mruBottomMiddleSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "arrangements 2"
            )
    )
)

(defwidget mruBottomRightSection []
    (box
        :vexpand false
        :hexpand false
            (label 
                :text "extras"
            )
    )
)

;; ;; ;; END BOTTOM SECTION

;; ;; ;; BEGIN SUBSECTION

(defwidget mainrollupSubRow []
    (box
        :vexpand false
        :hexpand false
        :orientation "vertical"
            (mruSubSpacer)
            (mruSubSection)
    )
)

(defwidget mruSubSpacer []
    (box)
)

(defwidget mruSubSection []
    (box
        :vexpand false
        :hexpand false
        :orientation "horizontal"
            (mruSubProfile)
            (mruSubPowermenu)
            (mruSubDrivespace)
    )
)

(defwidget mruSubProfile []
    (box
        :vexpand false
        :hexpand false
        :space-evenly false
        :spacing 5
            (box
                :class "roundedProfileImage"
            )
            (label
                :xalign 0
                :text "${internalUname}"
            )
            (label :text "")
    )
)

(defwidget mruSubPowermenu []
    (box
        :vexpand false
        :hexpand false
            (mruSubPowermenuButton 
                :action "cutefish-settings&&disown" 
                :icon "󰒓"
            )
            (mruSubPowermenuButton 
                :action "cutefish-shutdown&&disown" 
                :icon "󰐥"
            )
            (mruSubPowermenuButton 
                :action "echo placeholder" 
                :icon "󰀻"
            )
    )
)

;; ;; ;; ;; buttons for subpowermenu

(defwidget mruSubPowermenuButton [icon action]
    (box
        :vexpand false
        :hexpand false
            (eventbox
                :cursor "pointer"
                    (button 
                        :class "iconGeneric"
                        :onclick "${action}" 
                        "${icon}"
                    )
            )

    )
)

;; ;; ;; ;; end buttons for subpowermenu

(defwidget mruSubDrivespace []
    (box
        :vexpand false
        :hexpand false
            (label 
                :class "textNormalGeneric" 
                :text "󰋊 ${round(EWW_DISK["/"].used/1073741824, 1)} GiB/${round(EWW_DISK["/"].total/1073741824, 1)} GiB"
            )
    )
)

;; ;; ;; END SUBSECTION

;; end microwidgets